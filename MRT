import glob
import os

# Determine most recent file
list_of_files = glob.glob('F:/ACCOUNTING/POSITION/Daily/MiddleOffice/SMART/*EOD.xlsx') # * means all if need specific format then *.csv
latest_file = max(list_of_files, key=os.path.getctime)
print(latest_file)

import pandas as pd

# Define files and paths
forwards = (r"F:\ACCOUNTING\POSITION\Daily\MiddleOffice\Projects\MRT\Forwards.xlsx")
test = (r"F:\ACCOUNTING\POSITION\Daily\MiddleOffice\Projects\MRT\Test.xlsx")
filename = os.path.basename(latest_file)


# Define position file import variable
xlsx1 = pd.ExcelFile (latest_file)

# Concatenate columns to create Key column for merging dataframes
dfCashFwd = pd.read_excel(xlsx1, sheet_name='CashForward5')
dfCashFwd["Key"] = dfCashFwd["Position Name"].map(str) + "/" + dfCashFwd["Position Description"].map(str) + "/" + dfCashFwd["Position Type"].map(str)
dfCNDFwd = pd.read_excel(xlsx1, sheet_name='CNDForward5')
dfCNDFwd["Key"] = dfCNDFwd["Position Name"].map(str) + dfCNDFwd["Position Description"].map(str) + dfCNDFwd["Position Type"].map(str)

# Concatenate Cash and Cash Net DDG sheets into one dateframe
dfTotalFwd = pd.concat([dfCashFwd,dfCNDFwd],axis=0, sort=True)

# Remove rows where Position Name column shows a "0"
dfTotalFwd = dfTotalFwd[dfTotalFwd['Position Name'] != 0]

# Reset Index to single linear iteration (from 123123 to 123456)
dfTotalFwd = dfTotalFwd.reset_index(drop=True)

keycol = dfTotalFwd['Key']
dfTotalFwd.drop(labels=['Key'], axis=1,inplace = True)
dfTotalFwd.insert(0, 'Key', keycol)

# Convert dates in header row with multiple data types into a more readible format
import datetime

mapper = lambda x: x.strftime("%b-%Y") if isinstance(x, datetime.datetime) else x
dfTotalFwd.columns = dfTotalFwd.columns.map(mapper)

# Sum rows where the Key is identical
dfTotalFwd = dfTotalFwd.groupby(['Key'], as_index=False).sum()

# Create a copy of dfTotalFwd
df = dfTotalFwd

# Reform the dataframe into a new format
result = df.set_index('Key').stack().reset_index()
result.columns = ['Key', 'Contract', 'Amt']

# Remove rows where Amt = 0
df = result[result['Amt'] != 0]

# Define Month and Year columns derived from the Month-Yr column
df["Month"] = df["Contract"].map(lambda x: str(x)[:3])
df["Year"] = df["Contract"].map(lambda x: str(x)[-2:])

# Merged Months table with df to convert months to futures codes
xls2 = pd.ExcelFile (r"F:\ACCOUNTING\POSITION\Daily\MiddleOffice\Projects\MRT\Months.xlsx")
dfMonth = pd.read_excel(xls2)
df = (pd.merge(df,dfMonth,on="Month",how='inner'))

# Merge Sbox table into df
xls3 = pd.ExcelFile (r"F:\ACCOUNTING\POSITION\Daily\MiddleOffice\Projects\MRT\SAP_Sbox.xlsx")
dfSbox = pd.read_excel(xls3)
df = (pd.merge(df,dfSbox,on="Key",how='inner'))
df = df.fillna('')

import numpy as np
tester = ['#',' ','']
df['Test'] = np.where(np.logical_or(df['Ticker'].isin(tester),df['Month_Code'].isin(tester),df['Year'].isin(tester)),'True','False')
df['Contract'] = np.where(df['Test'] == 'False', df["Ticker"].map(str) + df["Month_Code"].map(str) + df["Year"], '')

to_drop = ['Possible_Sbox','Month','Year','Month_Code','Ticker','Test']
df.drop(to_drop, inplace=True, axis=1)

# Save new Positions file
df.to_excel(test)

# Save new Positions file
dfTotalFwd.to_excel(forwards)
